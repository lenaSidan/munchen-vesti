const fs = require("fs");
const path = require("path");

const eventsDir = path.join(process.cwd(), "public", "events");
const archiveDir = path.join(eventsDir, "arhiv");

const imagesDir = path.join(process.cwd(), "public", "images");
const archiveImagesDir = path.join(imagesDir, "arhivImages");

// –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –ø–∞–ø–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
if (!fs.existsSync(archiveDir)) fs.mkdirSync(archiveDir, { recursive: true });
if (!fs.existsSync(archiveImagesDir)) fs.mkdirSync(archiveImagesDir, { recursive: true });

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
const today = new Date();
today.setHours(0, 0, 0, 0);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º .ru –∏ .de
const localeMdPattern = /\.(ru|de)\.md$/;

fs.readdirSync(eventsDir).forEach((file) => {
  if (!localeMdPattern.test(file)) return;

  const filePath = path.join(eventsDir, file);
  const content = fs.readFileSync(filePath, "utf-8");

  const dateMatch = content.match(/^date:\s*["']?(.+?)["']?$/m);
  const endDateMatch = content.match(/^endDate:\s*["']?(.+?)["']?$/m);
  const imageMatch = content.match(/image:\s*["']?(\/?images\/([a-zA-Z0-9._-]+\.(webp|png|jpg|jpeg)))["']?/);

  const startDate = dateMatch ? new Date(dateMatch[1]) : null;

  let endDate = null;
  if (endDateMatch && !isNaN(Date.parse(endDateMatch[1]))) {
    endDate = new Date(endDateMatch[1]);
  } else if (startDate && !isNaN(startDate.getTime())) {
    endDate = new Date(startDate);
  }

  console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞: ${file}`);
  console.log(
    `‚Üí endDate: ${!endDate || isNaN(endDate.getTime()) ? "Invalid" : endDate.toISOString()} | cutoff: ${today.toISOString()}`
  );

  if (!startDate || !endDate || isNaN(startDate) || isNaN(endDate)) {
    console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞): ${file}`);
    return;
  }

  // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
  if (endDate < today) {
    try {
      fs.renameSync(filePath, path.join(archiveDir, file));
      console.log(`üóÉÔ∏è –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: ${file}`);
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ ${file}:`, err);
    }

    // ‚ùó –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    // if (imageMatch) {
    //   const imageFilename = imageMatch[2];
    //   const srcImagePath = path.join(imagesDir, imageFilename);
    //   const destImagePath = path.join(archiveImagesDir, imageFilename);
    //
    //   if (fs.existsSync(srcImagePath)) {
    //     try {
    //       fs.renameSync(srcImagePath, destImagePath);
    //       console.log(`üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: ${imageFilename}`);
    //     } catch (err) {
    //       console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${imageFilename}:`, err);
    //     }
    //   }
    // }
  }
});
